---
- name: ghost cloudflared local k8s
  hosts: localhost
  gather_facts: false

  vars:

    ansible_python_interpreter: '{{ ansible_playbook_python }}'
    blog_image: ghost
    blog_image_tag: 4-alpine
    blog_dns: local.chrisdlg.com
    mount_path: /var/lib/ghost/content
    cloudflared_image: cloudflare/cloudflared
    cloudflared_tag: 2022.1.2
    tunnel_name: local_blog
    replicas: 2
    path_to_cloudflared: /Users/chris/.cloudflared # A / is added to the end of this when setting the variable in the task.

  pre_tasks:

    - name: Check the status of minikube.
      command: minikube status
      register: minikube_status
      changed_when: false
      ignore_errors: true

    - debug: msg="{{ minikube_status.stdout }}"

    - debug: msg="{{ minikube_status.stderr }}"

    - name: Start minikube if it's not running.
      command: minikube start --vm = true
      when: "not minikube_status.stdout or 'Running' not in minikube_status.stdout"

    - name: Check that cloudflared is installed.
      command: cloudflared --version
      changed_when: false
      ignore_errors: false

  tasks:

    - name: Create a Deployment for Blog container.
      k8s:
        state: present
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: blog
            namespace: default
            labels:
              app: blog
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: blog
            template:
              metadata:
                labels:
                  app: blog
              spec:
                containers:
                - name: blog
                  image: "{{ blog_image }}:{{ blog_image_tag }}"
                  imagePullPolicy: IfNotPresent
                  ports:
                  - containerPort: 2368
                  env:
                  - name: url
                    value: http://"{{ blog_dns }}"
                  volumeMounts:
                  - mountPath: "{{ mount_path }}"
                    name: content
                volumes:
                - name: content
                  persistentVolumeClaim:
                    claimName: blog-content

    - name: Create a Service for Blog container.
      k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: blog
            namespace: default
          spec:
            type: LoadBalancer
            selector:
              app: blog
            ports:
            - port: 80
              targetPort: 2368

    - name: Create Volume for Blog container.
      k8s:
        state: present
        definition:
          apiVersion: v1
          kind: PersistentVolume
          metadata:
            name: blog-content
            namespace: default
          spec:
            capacity:
              storage: 5Gi
            volumeMode: Filesystem
            accessModes:
              - ReadWriteOnce
            hostPath:
              path: /data/blog-content/

    - name: Create VolumeClaim for previously created Volume. 
      k8s:
        state: present
        definition:
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            name: blog-content
            namespace: default
          spec:
            resources:
              requests:
                storage: 5Gi
            volumeMode: Filesystem
            accessModes:
              - ReadWriteOnce

    - name: Get ClusterIP for Blog container.
      command: kubectl get svc blog -o jsonpath='{.spec.clusterIP}'
      register: cluster_ip
      changed_when: false
      ignore_errors: false

    - name: Create Cloudflare Tunnel aka Named Tunnel for Edge target.
      command: cloudflared tunnel create "{{ tunnel_name }}"
      register: result
      changed_when: '"tunnel with name already exists" not in result.stdout'
      ignore_errors: true

    - name: Register Cloudflare Tunnel UUID as variable.
      ansible.builtin.shell:
        cmd: cloudflared tunnel list | awk '/{{ tunnel_name|quote }}/{print $1}'
      register: tunnel_UUID
      changed_when: false

    - name: Create K8s Secret for Tunnel.
      k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          type: generic
          metadata:
            name: tunnel-credentials
            namespace: default
          data:
            credentials.json: "{{ lookup('file', '{{ path_to_cloudflared }}/{{ tunnel_UUID.stdout }}.json') | string | b64encode }}"
        
    - name: Create a ConfigMap for Cloudflare Tunnel configuration.
      k8s:
        state: present
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: cloudflared
            namespace: default
          data:
            config.yaml: |
              tunnel: {{ tunnel_name }}
              credentials-file: /etc/cloudflared/creds/credentials.json
              metrics: 0.0.0.0:2000
              no-autoupdate: true
              ingress:
              - hostname: {{ blog_dns }}
                service: http://{{ cluster_ip.stdout }}
              - service: http_status:404

    - name: Create a Deployment for Cloudflare Tunnel containers. 
      k8s:
        state: present
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: cloudflared
            namespace: default
          spec:
            selector:
              matchLabels:
                app: cloudflared
            replicas: "{{ replicas }}"  # You could also consider elastic scaling for this deployment 
            template:
               metadata:
                 labels:
                   app: cloudflared
               spec:
                 containers:
                 - name: cloudflared
                   image: "{{ cloudflared_image }}:{{ cloudflared_tag }}"
                   args:
                   - tunnel
                   - --config
                   - /etc/cloudflared/config/config.yaml
                   - run
                   livenessProbe:
                     httpGet:
                       # Cloudflared has a /ready endpoint which returns 200 if and only if
                       # it has an active connection to the edge.
                       path: /ready
                       port: 2000
                     failureThreshold: 1
                     initialDelaySeconds: 10
                     periodSeconds: 10
                   volumeMounts:
                   - name: config
                     mountPath: /etc/cloudflared/config
                     readOnly: true
                   # Each tunnel has an associated "credentials file" which authorizes machines
                   # to run the tunnel. cloudflared will read this file from its local filesystem,
                   # and it'll be stored in a k8s secret.
                   - name: creds
                     mountPath: /etc/cloudflared/creds
                     readOnly: true
                 volumes:
                 - name: creds
                   secret:
                     secretName: tunnel-credentials
                 # Create a config.yaml file from the ConfigMap below.
                 - name: config
                   configMap:
                     name: cloudflared
                     items:
                     - key: config.yaml
                       path: config.yaml

  post_tasks:
      
    - name: Exposing Blog container on the host via Minikube.
      command: minikube service blog --url
      changed_when: false
      register: minikube_service
    
    - debug:
        msg: "Blog URL: {{ minikube_service['stdout_lines'][0] }}"

    - name: Create DNS record for tunnel at "{{ blog_dns }}"
      command: cloudflared tunnel route dns --overwrite-dns {{ tunnel_UUID.stdout }} {{ blog_dns }}
      changed_when: false
      register: tunnel_DNS

    - debug: 
        msg: "{{ tunnel_DNS.stdout }}"
